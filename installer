#!/usr/bin/env bash

commit_count_file="$HOME/.config/kof/commit_count.txt"

# Make config file
mkdir -p ~/.config/kof
echo "file_extension = md" > ~/.config/kof/config.txt

# Make commit counter
echo "main: 0" > "$commit_count_file"
echo "create: 0" >> "$commit_count_file"

# Prepare main file structure
if [ -d "$HOME/Documents" ]; then
    if [ -d "$HOME/Documents/notes" ]; then
        printf "Making a backup of your existing notes...\n"
        mkdir "$HOME/notes_backup"
        cp -r "$HOME/Documents/notes" "$HOME/notes_backup" 
        if [ "$?" -eq 0 ]; then
            rm -r "$HOME/Documents/notes"
            printf "Making a notes directory...\n"
            # Make git repo
            mkdir -p $HOME/.config/kof/repo/notes.git
            git init --bare $HOME/.config/kof/repo/notes.git > /dev/null
            pushd $HOME/Documents && git clone $HOME/.config/kof/repo/notes.git > /dev/null
            mkdir $HOME/Documents/notes/journal
            pushd > /dev/null
        else
            printf "Backup failed. Original notes have not been deleted.\n"
            exit 1
        fi
    else
        printf "Making a notes directory...\n"
        mkdir -p $HOME/.config/kof/repo/notes.git
        git init --bare $HOME/.config/kof/repo/notes.git > /dev/null
        pushd $HOME/Documents && git clone $HOME/.config/kof/repo/notes.git > /dev/null
        mkdir $HOME/Documents/notes/journal
        pushd > /dev/null
    fi
else
    printf "Making a Documents directory...\n"
    mkdir $HOME/Documents
    printf "Documents directory created.\n"
    printf "\n"
    printf "Making a notes directory...\n"
    # Make git repo
    mkdir -p $HOME/.config/kof/repo/notes.git
    git init --bare $HOME/.config/kof/repo/notes.git > /dev/null
    pushd $HOME/Documents && git clone $HOME/.config/kof/repo/notes.git > /dev/null
    mkdir $HOME/Documents/notes/journal
    pushd > /dev/null
fi

if [[ ! -f kof ]]; then
    printf "Error: 'kof' executable not found in the current directory.\n"
    exit 1
fi

sudo install -m 755 kof /usr/local/bin/kof

echo ""
printf "Installation complete. You can now use 'kof' from the command line.\n"
echo ""
read -p "Do you want to create aliases for 'kof --create' and 'kof --main'? (y/n): " create_aliases

if [[ "$create_aliases" =~ ^[Yy]$ ]]; then

    shell_config=""
    if [ -n "$ZSH_VERSION" ]; then
        shell_config="$HOME/.zshrc"
    elif [ -n "$BASH_VERSION" ]; then
        shell_config="$HOME/.bashrc"
    else
        printf "Could not determine your shell. Please manually add the following aliases:\n"
        echo "alias create='kof --create'"
        echo "alias main='kof --main'"
        exit 1
    fi

    echo "alias create='kof --create'" >> "$shell_config"
    echo "alias main='kof --main'" >> "$shell_config"

    source "$shell_config"

    printf "\n"
    printf "Aliases created. You can now use 'create' to create entries in the journal and 'main' to create entries in the main file.\n"
    printf "\n"
else
    printf "\n"
    printf "Skipping alias creation.\n"
    printf "\n"
fi


read -p "Do you want to sync your repo on a server? (y/n): " syncit

function syncRepo() {
    read -p "Enter your server's user: " user
    read -p "Enter your server's IP: " ip

    local ip=$(formatAddress "$ip")
    local remote_host="$user@$ip"
    local notes_dir="$HOME/Documents/notes"

    printf "Starting the sync process...\n"

    if [[ -d "$repo" ]]; then
        printf "Syncing directory $repo to $remote_host...\n"
        scp -r "$repo" "$remote_host":
        if [[ "$?" -ne 0 ]]; then
            printf "Error: Failed to transfer directory.\n"
            exit 1
        else
            printf "Successfully transferred directory. Removing local copy...\n"
            sudo rm -r "$repo"
        fi
    fi

    if [[ -d "$notes_dir" ]]; then
        printf "Backing up existing notes directory...\n"
        mkdir "$HOME/notes_repo_backup"
        cp -r "$HOME/Documents/notes" "$HOME/notes_repo_backup"; sudo rm -r "$HOME/Documents/notes"
        printf "Cloning notes repository from server...\n"
        git clone "$remote_host":notes.git "$HOME/Documents/notes"
    else
        printf "Cloning notes repository from server...\n"
        git clone "$remote_host":notes.git "$HOME/Documents/notes"
    fi

    printf "Sync process completed successfully!\n"
}

if [[ "$syncit" =~ ^[Yy]$ ]]; then
    syncRepo
fi
